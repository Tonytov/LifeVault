// üîê Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ LifeVault

import { Request, Response, NextFunction } from 'express';
import { authService } from '@/services/auth.service';
import { appLogger } from '@/utils/logger';
import type { AuthenticatedRequest } from '@/types';

// üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
export const authenticateToken = async (
  req: AuthenticatedRequest, 
  res: Response, 
  next: NextFunction
): Promise<void> => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
    
    if (!token) {
      res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
      return;
    }
    
    // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const decoded = authService.verifyAccessToken(token);
    
    if (!decoded) {
      res.status(403).json({
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
      });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await authService.getCurrentUser(decoded.userId);
    
    if (!user) {
      res.status(403).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      return;
    }
    
    if (!user.isPhoneVerified) {
      res.status(403).json({
        success: false,
        message: '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
      });
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å
    req.user = {
      id: user.id,
      phoneNumber: user.phoneNumber,
      isPhoneVerified: user.isPhoneVerified
    };
    
    next();
    
  } catch (error) {
    appLogger.error.api(error as Error, req.path, req.user?.id);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞'
    });
  }
};

// üì± –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö endpoint'–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
export const optionalAuth = async (
  req: AuthenticatedRequest, 
  res: Response, 
  next: NextFunction
): Promise<void> => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1];
    
    if (token) {
      const decoded = authService.verifyAccessToken(token);
      
      if (decoded) {
        const user = await authService.getCurrentUser(decoded.userId);
        
        if (user && user.isPhoneVerified) {
          req.user = {
            id: user.id,
            phoneNumber: user.phoneNumber,
            isPhoneVerified: user.isPhoneVerified
          };
        }
      }
    }
    
    next();
    
  } catch (error) {
    // –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    next();
  }
};

// üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const requireProfile = async (
  req: AuthenticatedRequest, 
  res: Response, 
  next: NextFunction
): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({
        success: false,
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
      return;
    }
    
    const user = await authService.getCurrentUser(req.user.id);
    
    if (!user?.profile) {
      res.status(400).json({
        success: false,
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      });
      return;
    }
    
    next();
    
  } catch (error) {
    appLogger.error.api(error as Error, req.path, req.user?.id);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
};

// üîí Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç CSRF –∞—Ç–∞–∫ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Origin)
export const csrfProtection = (req: Request, res: Response, next: NextFunction): void => {
  const allowedOrigins = process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'];
  const origin = req.headers.origin;
  
  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  if (!origin) {
    next();
    return;
  }
  
  if (allowedOrigins.includes(origin)) {
    next();
    return;
  }
  
  res.status(403).json({
    success: false,
    message: '–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π origin'
  });
};

// üîÑ Middleware –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
export const requestLogger = (req: AuthenticatedRequest, res: Response, next: NextFunction): void => {
  const startTime = Date.now();
  
  res.on('finish', () => {
    const duration = Date.now() - startTime;
    const userId = req.user?.id || 'anonymous';
    
    appLogger.system.startup(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π
    
    if (process.env.ENABLE_REQUEST_LOGGING === 'true') {
      console.log(`üìù ${req.method} ${req.path} - ${res.statusCode} - ${duration}ms - User: ${userId}`);
    }
  });
  
  next();
};