// ‚úÖ Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö LifeVault

import Joi from 'joi';
import { Request, Response, NextFunction } from 'express';
import type { AuthenticatedRequest } from '@/types';

// üîß –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const phoneSchema = Joi.string()
  .pattern(/^\+?[1-9]\d{1,14}$/)
  .required()
  .messages({
    'string.pattern.base': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
    'any.required': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
  });

const codeSchema = Joi.string()
  .length(6)
  .pattern(/^\d{6}$/)
  .required()
  .messages({
    'string.length': '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä',
    'string.pattern.base': '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã',
    'any.required': '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
  });

// üì± –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞
export const validateSendCode = (req: Request, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    phoneNumber: phoneSchema
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  next();
};

// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞
export const validateVerifyCode = (req: Request, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    phoneNumber: phoneSchema,
    code: codeSchema
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  next();
};

// üë§ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const validateUserProfile = (req: AuthenticatedRequest, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    firstName: Joi.string().min(1).max(50).optional(),
    lastName: Joi.string().min(1).max(50).optional(),
    dateOfBirth: Joi.date()
      .max('now')
      .min('1900-01-01')
      .required()
      .messages({
        'date.max': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º',
        'date.min': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
        'any.required': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
      }),
    gender: Joi.string()
      .valid('MALE', 'FEMALE', 'OTHER')
      .required()
      .messages({
        'any.only': '–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MALE, FEMALE –∏–ª–∏ OTHER',
        'any.required': '–ü–æ–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    height: Joi.number()
      .integer()
      .min(100)
      .max(250)
      .required()
      .messages({
        'number.min': '–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100 —Å–º',
        'number.max': '–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 250 —Å–º',
        'any.required': '–†–æ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    weight: Joi.number()
      .integer()
      .min(20)
      .max(300)
      .required()
      .messages({
        'number.min': '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20 –∫–≥',
        'number.max': '–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 300 –∫–≥',
        'any.required': '–í–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    region: Joi.string()
      .length(2)
      .uppercase()
      .required()
      .messages({
        'string.length': '–†–µ–≥–∏–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥–æ–º –∏–∑ 2 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RU)',
        'any.required': '–†–µ–≥–∏–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    isPublicProfile: Joi.boolean().optional()
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  next();
};

// üö≠ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∏
export const validateHabit = (req: AuthenticatedRequest, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    type: Joi.string()
      .valid('SMOKING', 'ALCOHOL', 'SUGAR')
      .required()
      .messages({
        'any.only': '–¢–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å SMOKING, ALCOHOL –∏–ª–∏ SUGAR',
        'any.required': '–¢–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      }),
    isActive: Joi.boolean().required(),
    dailyUsage: Joi.number().integer().min(0).max(1000).optional(),
    costPerUnit: Joi.number().min(0).max(10000).optional(),
    unitsPerPack: Joi.number().integer().min(1).max(1000).optional(),
    startDate: Joi.date().max('now').optional(),
    quitDate: Joi.date().max('now').optional(),
    targetQuitDate: Joi.date().min('now').optional(),
    additionalInfo: Joi.string().max(500).optional()
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–∞—Ç
  const { startDate, quitDate, targetQuitDate } = req.body;
  
  if (startDate && quitDate && new Date(startDate) > new Date(quitDate)) {
    res.status(400).json({
      success: false,
      message: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ—Ç–∫–∞–∑–∞'
    });
    return;
  }
  
  if (startDate && targetQuitDate && new Date(startDate) > new Date(targetQuitDate)) {
    res.status(400).json({
      success: false,
      message: '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã –æ—Ç–∫–∞–∑–∞'
    });
    return;
  }
  
  next();
};

// üéØ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∞
export const validateStartChallenge = (req: AuthenticatedRequest, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    challengeId: Joi.string().uuid().required().messages({
      'string.guid': 'challengeId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º UUID',
      'any.required': 'ID –≤—ã–∑–æ–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    })
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–∞',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  next();
};

// üîÑ –í–∞–ª–∏–¥–∞—Ü–∏—è refresh —Ç–æ–∫–µ–Ω–∞
export const validateRefreshToken = (req: Request, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    refreshToken: Joi.string().required().messages({
      'any.required': 'Refresh —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    })
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  next();
};

// üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export const validatePagination = (req: Request, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    page: Joi.number().integer().min(1).default(1),
    limit: Joi.number().integer().min(1).max(100).default(20),
    sortBy: Joi.string().optional(),
    sortOrder: Joi.string().valid('asc', 'desc').default('desc')
  });

  const { error, value } = schema.validate(req.query);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  req.query = { ...req.query, ...value };
  
  next();
};

// üè™ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤—Ä–µ–º–µ–Ω–∏
export const validateTimeBankPurchase = (req: AuthenticatedRequest, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    itemId: Joi.string().uuid().required().messages({
      'string.guid': 'itemId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º UUID',
      'any.required': 'ID —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    }),
    quantity: Joi.number().integer().min(1).max(100).default(1)
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  next();
};

// üì± –í–∞–ª–∏–¥–∞—Ü–∏—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const validatePushNotification = (req: Request, res: Response, next: NextFunction): void => {
  const schema = Joi.object({
    title: Joi.string().min(1).max(100).required(),
    body: Joi.string().min(1).max(500).required(),
    type: Joi.string()
      .valid('CHALLENGE_REMINDER', 'HABIT_MILESTONE', 'ACHIEVEMENT_UNLOCKED', 'DAILY_MOTIVATION', 'STREAK_WARNING')
      .required(),
    data: Joi.object().optional(),
    userIds: Joi.array().items(Joi.string().uuid()).optional()
  });

  const { error } = schema.validate(req.body);
  
  if (error) {
    res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      errors: formatJoiErrors(error)
    });
    return;
  }
  
  next();
};

// üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ Joi
function formatJoiErrors(error: Joi.ValidationError): Record<string, string[]> {
  const formattedErrors: Record<string, string[]> = {};
  
  error.details.forEach(detail => {
    const field = detail.path.join('.');
    if (!formattedErrors[field]) {
      formattedErrors[field] = [];
    }
    formattedErrors[field].push(detail.message);
  });
  
  return formattedErrors;
}

// üîç Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ UUID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export const validateUUIDParam = (paramName: string) => {
  return (req: Request, res: Response, next: NextFunction): void => {
    const schema = Joi.string().uuid().required();
    const { error } = schema.validate(req.params[paramName]);
    
    if (error) {
      res.status(400).json({
        success: false,
        message: `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ${paramName}`
      });
      return;
    }
    
    next();
  };
};