// üöÄ LifeVault Backend Server

import express, { Application, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import rateLimit from 'express-rate-limit';

import { config, logSafeConfig, isDevelopment } from '@/utils/config';
import { appLogger } from '@/utils/logger';
import { connectDatabase, disconnectDatabase, databaseUtils } from '@/utils/database';
import { requestLogger } from '@/middleware/auth.middleware';

// üìÅ –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
import authRoutes from '@/routes/auth.routes';
// import userRoutes from '@/routes/user.routes';
// import habitRoutes from '@/routes/habit.routes';
// import challengeRoutes from '@/routes/challenge.routes';
// import timebankRoutes from '@/routes/timebank.routes';

class LifeVaultServer {
  private app: Application;
  private port: number;

  constructor() {
    this.app = express();
    this.port = config.port;
    this.setupMiddleware();
    this.setupRoutes();
    this.setupErrorHandling();
  }

  // üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
  private setupMiddleware(): void {
    // üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    this.app.use(helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", "data:", "https:"],
        },
      },
    }));

    // üåç CORS
    this.app.use(cors({
      origin: config.corsOrigin.split(','),
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
    }));

    // üì¶ –°–∂–∞—Ç–∏–µ
    this.app.use(compression());

    // üìä –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (isDevelopment()) {
      this.app.use(requestLogger);
    }

    // üî¢ –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ 
      limit: '10mb',
      verify: (req: any, res, buf, encoding) => {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        if (buf.length > 10 * 1024 * 1024) { // 10MB
          throw new Error('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ');
        }
      }
    }));
    
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // üîí Rate limiting
    const limiter = rateLimit({
      windowMs: config.rateLimitWindowMs,
      max: config.rateLimitMax,
      message: {
        success: false,
        message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      },
      standardHeaders: true,
      legacyHeaders: false,
    });
    
    this.app.use('/api/', limiter);

    // üìä –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const authLimiter = rateLimit({
      windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
      max: 5, // –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –∑–∞ 15 –º–∏–Ω—É—Ç
      message: {
        success: false,
        message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      }
    });
    
    this.app.use('/api/auth/send-code', authLimiter);
    this.app.use('/api/auth/verify-code', authLimiter);
  }

  // üõ£Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
  private setupRoutes(): void {
    // üíö Health check
    this.app.get('/health', async (req: Request, res: Response) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const dbStats = await databaseUtils.getStats();
        
        res.json({
          success: true,
          message: 'LifeVault Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
          timestamp: new Date().toISOString(),
          version: '1.0.0',
          environment: config.nodeEnv,
          database: {
            connected: true,
            stats: dbStats
          },
          uptime: Math.floor(process.uptime())
        });
      } catch (error) {
        res.status(503).json({
          success: false,
          message: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–µ—Ä–≤–∏—Å–∞',
          error: isDevelopment() ? (error as Error).message : undefined
        });
      }
    });

    // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    this.app.get('/metrics', async (req: Request, res: Response) => {
      try {
        const memoryUsage = process.memoryUsage();
        const uptime = process.uptime();
        const dbStats = await databaseUtils.getStats();

        res.json({
          success: true,
          data: {
            server: {
              uptime: Math.floor(uptime),
              memoryUsage: {
                rss: Math.round(memoryUsage.rss / 1024 / 1024) + ' MB',
                heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + ' MB',
                heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + ' MB'
              },
              nodeVersion: process.version,
              platform: process.platform
            },
            database: dbStats
          }
        });
      } catch (error) {
        res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫'
        });
      }
    });

    // üè† –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
    this.app.get('/', (req: Request, res: Response) => {
      res.json({
        success: true,
        message: 'üîí LifeVault API v1.0',
        description: 'Backend –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏',
        documentation: '/api-docs',
        endpoints: {
          health: '/health',
          metrics: '/metrics',
          auth: '/api/auth/*',
          user: '/api/user/*',
          habits: '/api/habits/*',
          challenges: '/api/challenges/*',
          timebank: '/api/timebank/*'
        }
      });
    });

    // üîå API —Ä–æ—É—Ç—ã
    const apiRouter = express.Router();
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–æ—É—Ç–æ–≤
    apiRouter.get('/auth/status', (req: Request, res: Response) => {
      res.json({ success: true, message: 'Auth service ready' });
    });
    
    apiRouter.get('/user/profile', (req: Request, res: Response) => {
      res.json({ success: true, message: 'User service ready' });
    });
    
    apiRouter.get('/habits', (req: Request, res: Response) => {
      res.json({ success: true, message: 'Habits service ready' });
    });
    
    apiRouter.get('/challenges', (req: Request, res: Response) => {
      res.json({ success: true, message: 'Challenges service ready' });
    });
    
    apiRouter.get('/timebank', (req: Request, res: Response) => {
      res.json({ success: true, message: 'TimeBank service ready' });
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
    apiRouter.use('/auth', authRoutes);
    // TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã
    // apiRouter.use('/user', userRoutes);
    // apiRouter.use('/habits', habitRoutes);
    // apiRouter.use('/challenges', challengeRoutes);
    // apiRouter.use('/timebank', timebankRoutes);

    this.app.use('/api', apiRouter);

    // üîç 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    this.app.all('*', (req: Request, res: Response) => {
      res.status(404).json({
        success: false,
        message: `–ú–∞—Ä—à—Ä—É—Ç ${req.method} ${req.path} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
        availableEndpoints: [
          '/',
          '/health', 
          '/metrics',
          '/api/auth/*',
          '/api/user/*',
          '/api/habits/*',
          '/api/challenges/*',
          '/api/timebank/*'
        ]
      });
    });
  }

  // ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  private setupErrorHandling(): void {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.app.use((error: Error, req: Request, res: Response, next: NextFunction) => {
      appLogger.error.api(error, req.path);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.name === 'ValidationError') {
        res.status(400).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          error: isDevelopment() ? error.message : undefined
        });
        return;
      }

      if (error.name === 'UnauthorizedError') {
        res.status(401).json({
          success: false,
          message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
        });
        return;
      }

      if (error.message.includes('ENOTFOUND') || error.message.includes('ECONNREFUSED')) {
        res.status(503).json({
          success: false,
          message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏'
        });
        return;
      }

      // –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: isDevelopment() ? error.message : undefined,
        stack: isDevelopment() ? error.stack : undefined
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (error: Error) => {
      appLogger.error.api(error, 'uncaughtException');
      console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      this.gracefulShutdown('SIGTERM');
    });

    process.on('unhandledRejection', (reason: unknown, promise: Promise<any>) => {
      appLogger.error.api(new Error(`Unhandled Rejection: ${reason}`), 'unhandledRejection');
      console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
    });
  }

  // üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  public async start(): Promise<void> {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await connectDatabase();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      this.app.listen(this.port, () => {
        appLogger.system.startup();
        logSafeConfig();
        
        console.log(`
üîí LifeVault Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!

üåê –°–µ—Ä–≤–µ—Ä:     http://localhost:${this.port}
üîß –û–∫—Ä—É–∂–µ–Ω–∏–µ:  ${config.nodeEnv}
üíö –ó–¥–æ—Ä–æ–≤—å–µ:   http://localhost:${this.port}/health
üìä –ú–µ—Ç—Ä–∏–∫–∏:    http://localhost:${this.port}/metrics
üìö API:        http://localhost:${this.port}/api

üî• –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
        `);
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
      this.setupGracefulShutdown();

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      process.exit(1);
    }
  }

  // üõë Graceful shutdown
  private setupGracefulShutdown(): void {
    const signals = ['SIGTERM', 'SIGINT', 'SIGUSR2'];
    
    signals.forEach((signal) => {
      process.on(signal, () => {
        console.log(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...`);
        this.gracefulShutdown(signal);
      });
    });
  }

  private async gracefulShutdown(signal: string): Promise<void> {
    console.log(`üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å–∏–≥–Ω–∞–ª—É ${signal}...`);
    
    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await disconnectDatabase();
      appLogger.system.shutdown();
      
      console.log('‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error);
      process.exit(1);
    }
  }
}

// üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
  const server = new LifeVaultServer();
  server.start().catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  });
}

export default LifeVaultServer;