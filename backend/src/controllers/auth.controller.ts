// üîê –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ LifeVault

import { Request, Response } from 'express';
import { authService } from '@/services/auth.service';
import { appLogger } from '@/utils/logger';
import type { AuthenticatedRequest, SMSVerificationRequest } from '@/types';

export class AuthController {
  
  // üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞
  async sendVerificationCode(req: Request, res: Response): Promise<void> {
    try {
      const { phoneNumber } = req.body;
      
      const result = await authService.sendVerificationCode(phoneNumber);
      
      if (result.success) {
        res.status(200).json({
          success: true,
          message: result.message
        });
      } else {
        res.status(400).json({
          success: false,
          message: result.message
        });
      }
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/send-code');
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      });
    }
  }
  
  // ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS –∫–æ–¥–∞
  async verifyCode(req: Request, res: Response): Promise<void> {
    try {
      const verificationData: SMSVerificationRequest = req.body;
      
      const result = await authService.verifyCode(verificationData);
      
      if (result.success) {
        res.status(200).json({
          success: true,
          message: result.message,
          data: {
            token: result.token,
            refreshToken: result.refreshToken
          }
        });
      } else {
        res.status(400).json({
          success: false,
          message: result.message
        });
      }
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/verify-code');
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞'
      });
    }
  }
  
  // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refreshToken(req: Request, res: Response): Promise<void> {
    try {
      const { refreshToken } = req.body;
      
      const result = await authService.refreshAccessToken(refreshToken);
      
      if (result.success) {
        res.status(200).json({
          success: true,
          message: result.message,
          data: {
            token: result.token,
            refreshToken: result.refreshToken
          }
        });
      } else {
        res.status(401).json({
          success: false,
          message: result.message
        });
      }
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/refresh');
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞'
      });
    }
  }
  
  // üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(req: Request, res: Response): Promise<void> {
    try {
      const { refreshToken } = req.body;
      
      const result = await authService.logout(refreshToken);
      
      res.status(200).json({
        success: result.success,
        message: result.message
      });
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/logout');
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
      });
    }
  }
  
  // üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getCurrentUser(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      if (!req.user) {
        res.status(401).json({
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
        });
        return;
      }
      
      const user = await authService.getCurrentUser(req.user.id);
      
      if (!user) {
        res.status(404).json({
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }
      
      res.status(200).json({
        success: true,
        data: {
          id: user.id,
          phoneNumber: user.phoneNumber,
          isPhoneVerified: user.isPhoneVerified,
          hasProfile: !!user.profile,
          profile: user.profile ? {
            firstName: user.profile.firstName,
            lastName: user.profile.lastName,
            gender: user.profile.gender,
            region: user.profile.region
          } : null,
          createdAt: user.createdAt,
          lastLoginAt: user.lastLoginAt
        }
      });
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/me', req.user?.id);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
      });
    }
  }
  
  // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async checkAuthStatus(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const isAuthenticated = !!req.user;
      
      res.status(200).json({
        success: true,
        data: {
          isAuthenticated,
          user: isAuthenticated ? {
            id: req.user!.id,
            phoneNumber: req.user!.phoneNumber,
            isPhoneVerified: req.user!.isPhoneVerified
          } : null
        }
      });
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/status', req.user?.id);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      });
    }
  }
  
  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
  async deleteAccount(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      if (!req.user) {
        res.status(401).json({
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
        });
        return;
      }
      
      const result = await authService.deleteAccount(req.user.id);
      
      if (result.success) {
        appLogger.auth.login(req.user.phoneNumber, false); // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        res.status(200).json({
          success: true,
          message: result.message
        });
      } else {
        res.status(400).json({
          success: false,
          message: result.message
        });
      }
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/delete-account', req.user?.id);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞'
      });
    }
  }
  
  // üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
  async cleanupTokens(req: Request, res: Response): Promise<void> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const adminKey = req.headers['x-admin-key'];
      if (!adminKey || adminKey !== process.env.ADMIN_KEY) {
        res.status(403).json({
          success: false,
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
        });
        return;
      }
      
      const deletedCount = await authService.cleanupExpiredTokens();
      
      res.status(200).json({
        success: true,
        message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤`
      });
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/cleanup-tokens');
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤'
      });
    }
  }
  
  // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
  async getAuthStats(req: Request, res: Response): Promise<void> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const adminKey = req.headers['x-admin-key'];
      if (!adminKey || adminKey !== process.env.ADMIN_KEY) {
        res.status(403).json({
          success: false,
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
        });
        return;
      }
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      res.status(200).json({
        success: true,
        data: {
          message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞',
          timestamp: new Date().toISOString()
        }
      });
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/stats');
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      });
    }
  }
}

export const authController = new AuthController();