// üîê –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ LifeVault

import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { v4 as uuidv4 } from 'uuid';
import { prisma } from '@/utils/database';
import { config } from '@/utils/config';
import { appLogger } from '@/utils/logger';
import { smsService } from './sms.service';
import type { 
  LifeVaultJwtPayload, 
  SMSVerificationRequest, 
  SMSVerificationResponse 
} from '@/types';

export class AuthService {
  
  // üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async sendVerificationCode(phoneNumber: string): Promise<{ success: boolean; message: string }> {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const normalizedPhone = this.normalizePhoneNumber(phoneNumber);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
      const verificationCode = this.generateVerificationCode();
      const codeExpiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–¥–æ–º
      await prisma.user.upsert({
        where: { phoneNumber: normalizedPhone },
        update: {
          verificationCode,
          codeExpiresAt,
        },
        create: {
          phoneNumber: normalizedPhone,
          verificationCode,
          codeExpiresAt,
          isPhoneVerified: false,
        },
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
      const smsResult = await smsService.sendVerificationCode(normalizedPhone, verificationCode);
      
      if (smsResult.success) {
        appLogger.auth.register(normalizedPhone);
        return {
          success: true,
          message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω'
        };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS');
      }
      
    } catch (error) {
      appLogger.error.external('SMS', error as Error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      };
    }
  }
  
  // ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS –∫–æ–¥–∞ –∏ –≤—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤
  async verifyCode(data: SMSVerificationRequest): Promise<SMSVerificationResponse> {
    try {
      const normalizedPhone = this.normalizePhoneNumber(data.phoneNumber);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–¥–æ–º
      const user = await prisma.user.findUnique({
        where: { phoneNumber: normalizedPhone }
      });
      
      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      if (!user.verificationCode || user.verificationCode !== data.code) {
        appLogger.auth.verify(normalizedPhone, false);
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
        };
      }
      
      if (!user.codeExpiresAt || user.codeExpiresAt < new Date()) {
        return {
          success: false,
          message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫'
        };
      }
      
      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –æ—á–∏—â–∞–µ–º –∫–æ–¥ –∏ –ø–æ–º–µ—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
      const updatedUser = await prisma.user.update({
        where: { id: user.id },
        data: {
          isPhoneVerified: true,
          verificationCode: null,
          codeExpiresAt: null,
          lastLoginAt: new Date(),
        },
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã
      const { accessToken, refreshToken } = await this.generateTokenPair(updatedUser);
      
      appLogger.auth.verify(normalizedPhone, true);
      appLogger.auth.login(normalizedPhone, true);
      
      return {
        success: true,
        message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
        token: accessToken,
        refreshToken: refreshToken
      };
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/verify');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞'
      };
    }
  }
  
  // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ refresh —Ç–æ–∫–µ–Ω
  async refreshAccessToken(refreshTokenString: string): Promise<SMSVerificationResponse> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
      const storedToken = await prisma.refreshToken.findUnique({
        where: { token: refreshTokenString },
        include: { user: true }
      });
      
      if (!storedToken || storedToken.expiresAt < new Date()) {
        return {
          success: false,
          message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π refresh —Ç–æ–∫–µ–Ω'
        };
      }
      
      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º JWT
      try {
        jwt.verify(refreshTokenString, config.jwtSecret) as LifeVaultJwtPayload;
      } catch {
        return {
          success: false,
          message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω'
        };
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
      const { accessToken, refreshToken } = await this.generateTokenPair(storedToken.user);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
      await prisma.refreshToken.delete({
        where: { id: storedToken.id }
      });
      
      return {
        success: true,
        message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω',
        token: accessToken,
        refreshToken: refreshToken
      };
      
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/refresh');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞'
      };
    }
  }
  
  // üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(refreshTokenString: string): Promise<{ success: boolean; message: string }> {
    try {
      // –£–¥–∞–ª—è–µ–º refresh —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã
      await prisma.refreshToken.deleteMany({
        where: { token: refreshTokenString }
      });
      
      return {
        success: true,
        message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      };
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/logout');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
      };
    }
  }
  
  // üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤
  private async generateTokenPair(user: any) {
    const payload: LifeVaultJwtPayload = {
      userId: user.id,
      phoneNumber: user.phoneNumber,
      type: 'access'
    };
    
    // Access —Ç–æ–∫–µ–Ω (–∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏)
    const accessToken = jwt.sign(
      payload,
      config.jwtSecret,
      { expiresIn: config.jwtExpiresIn }
    );
    
    // Refresh —Ç–æ–∫–µ–Ω (–¥–ª–∏–Ω–Ω—ã–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏)
    const refreshPayload: LifeVaultJwtPayload = {
      ...payload,
      type: 'refresh'
    };
    
    const refreshToken = jwt.sign(
      refreshPayload,
      config.jwtSecret,
      { expiresIn: '30d' }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
    await prisma.refreshToken.create({
      data: {
        token: refreshToken,
        userId: user.id,
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
      },
    });
    
    return { accessToken, refreshToken };
  }
  
  // ‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è access —Ç–æ–∫–µ–Ω–∞
  verifyAccessToken(token: string): LifeVaultJwtPayload | null {
    try {
      const decoded = jwt.verify(token, config.jwtSecret) as LifeVaultJwtPayload;
      
      if (decoded.type !== 'access') {
        return null;
      }
      
      return decoded;
    } catch {
      return null;
    }
  }
  
  // üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
  async cleanupExpiredTokens(): Promise<number> {
    const result = await prisma.refreshToken.deleteMany({
      where: {
        expiresAt: {
          lt: new Date()
        }
      }
    });
    
    return result.count;
  }
  
  // üì± –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  private normalizePhoneNumber(phoneNumber: string): string {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digits = phoneNumber.replace(/\D/g, '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º + –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    if (digits.length >= 10) {
      return '+' + digits;
    }
    
    return digits;
  }
  
  // üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  private generateVerificationCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }
  
  // üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getCurrentUser(userId: string) {
    return await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        phoneNumber: true,
        isPhoneVerified: true,
        createdAt: true,
        lastLoginAt: true,
        profile: true,
      },
    });
  }
  
  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteAccount(userId: string): Promise<{ success: boolean; message: string }> {
    try {
      await prisma.user.delete({
        where: { id: userId }
      });
      
      return {
        success: true,
        message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      };
    } catch (error) {
      appLogger.error.api(error as Error, '/auth/delete-account');
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞'
      };
    }
  }
}

export const authService = new AuthService();