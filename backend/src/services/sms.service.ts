// üì± –°–µ—Ä–≤–∏—Å SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Twilio

import twilio from 'twilio';
import { config, isDevelopment } from '@/utils/config';
import { appLogger } from '@/utils/logger';

class SMSService {
  private client: twilio.Twilio;
  
  constructor() {
    this.client = twilio(config.twilioAccountSid, config.twilioAuthToken);
  }
  
  // üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async sendVerificationCode(phoneNumber: string, code: string): Promise<{ success: boolean; message: string }> {
    try {
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      if (isDevelopment() && phoneNumber.includes('test')) {
        console.log(`üì± [DEV] SMS –∫–æ–¥ –¥–ª—è ${phoneNumber}: ${code}`);
        return {
          success: true,
          message: 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)'
        };
      }
      
      const messageBody = `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ LifeVault: ${code}\n\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.\n–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!`;
      
      const message = await this.client.messages.create({
        body: messageBody,
        from: config.twilioPhoneNumber,
        to: phoneNumber,
      });
      
      if (message.sid) {
        appLogger.auth.login(phoneNumber, true);
        return {
          success: true,
          message: 'SMS –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
        };
      } else {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω SID —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
      
    } catch (error) {
      appLogger.error.external('Twilio SMS', error as Error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let userMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS';
      
      if (error instanceof Error) {
        if (error.message.includes('phone number')) {
          userMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        } else if (error.message.includes('balance')) {
          userMessage = '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ª—É–∂–±–æ–π SMS';
        } else if (error.message.includes('rate limit')) {
          userMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        }
      }
      
      return {
        success: false,
        message: userMessage
      };
    }
  }
  
  // üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–∑–æ–≤–µ
  async sendChallengeReminder(
    phoneNumber: string, 
    challengeTitle: string, 
    daysLeft: number
  ): Promise<{ success: boolean; message: string }> {
    try {
      const messageBody = `üéØ LifeVault: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ "${challengeTitle}"\n\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å! üí™`;
      
      if (isDevelopment()) {
        console.log(`üì± [DEV] Challenge SMS –¥–ª—è ${phoneNumber}: ${messageBody}`);
        return { success: true, message: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (DEV)' };
      }
      
      const message = await this.client.messages.create({
        body: messageBody,
        from: config.twilioPhoneNumber,
        to: phoneNumber,
      });
      
      return message.sid 
        ? { success: true, message: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' }
        : { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' };
        
    } catch (error) {
      appLogger.error.external('Twilio Challenge Reminder', error as Error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' };
    }
  }
  
  // üèÜ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º
  async sendAchievementNotification(
    phoneNumber: string, 
    achievementName: string, 
    rewardDays: number
  ): Promise<{ success: boolean; message: string }> {
    try {
      const messageBody = `üèÜ LifeVault: –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievementName}"!\n–ù–∞–≥—Ä–∞–¥–∞: +${rewardDays} –¥–Ω–µ–π –∂–∏–∑–Ω–∏\n\n–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üéâ`;
      
      if (isDevelopment()) {
        console.log(`üì± [DEV] Achievement SMS –¥–ª—è ${phoneNumber}: ${messageBody}`);
        return { success: true, message: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (DEV)' };
      }
      
      const message = await this.client.messages.create({
        body: messageBody,
        from: config.twilioPhoneNumber,
        to: phoneNumber,
      });
      
      return message.sid 
        ? { success: true, message: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' }
        : { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è' };
        
    } catch (error) {
      appLogger.error.external('Twilio Achievement', error as Error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è' };
    }
  }
  
  // üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async sendWeeklyReport(
    phoneNumber: string, 
    stats: {
      daysWithoutHabits: number;
      moneySaved: number;
      challengesCompleted: number;
    }
  ): Promise<{ success: boolean; message: string }> {
    try {
      const messageBody = `üìä LifeVault: –í–∞—à –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n\n–î–Ω–µ–π –±–µ–∑ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: ${stats.daysWithoutHabits}\n–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${stats.moneySaved}‚ÇΩ\n–í—ã–∑–æ–≤–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.challengesCompleted}\n\n–í—ã –º–æ–ª–æ–¥–µ—Ü! üåü`;
      
      if (isDevelopment()) {
        console.log(`üì± [DEV] Weekly Report SMS –¥–ª—è ${phoneNumber}: ${messageBody}`);
        return { success: true, message: '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (DEV)' };
      }
      
      const message = await this.client.messages.create({
        body: messageBody,
        from: config.twilioPhoneNumber,
        to: phoneNumber,
      });
      
      return message.sid 
        ? { success: true, message: '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' }
        : { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞' };
        
    } catch (error) {
      appLogger.error.external('Twilio Weekly Report', error as Error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞' };
    }
  }
  
  // ‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å—Ä—ã–≤–µ
  async sendStreakWarning(
    phoneNumber: string, 
    habitType: string, 
    currentStreak: number
  ): Promise<{ success: boolean; message: string }> {
    try {
      const habitNames = {
        SMOKING: '–∫—É—Ä–µ–Ω–∏—è',
        ALCOHOL: '–∞–ª–∫–æ–≥–æ–ª—è', 
        SUGAR: '—Å–∞—Ö–∞—Ä–∞'
      };
      
      const habitName = habitNames[habitType as keyof typeof habitNames] || habitType;
      
      const messageBody = `‚ö†Ô∏è LifeVault: –ú–æ—Ç–∏–≤–∞—Ü–∏—è\n\n–í—ã –∏–¥–µ—Ç–µ ${currentStreak} –¥–Ω–µ–π –±–µ–∑ ${habitName}!\n–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å —Å–µ–π—á–∞—Å - –≤—ã —Ç–∞–∫ –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏!\n\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –±–µ—Å—Ü–µ–Ω–Ω–æ! üí™`;
      
      if (isDevelopment()) {
        console.log(`üì± [DEV] Streak Warning SMS –¥–ª—è ${phoneNumber}: ${messageBody}`);
        return { success: true, message: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (DEV)' };
      }
      
      const message = await this.client.messages.create({
        body: messageBody,
        from: config.twilioPhoneNumber,
        to: phoneNumber,
      });
      
      return message.sid 
        ? { success: true, message: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' }
        : { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏' };
        
    } catch (error) {
      appLogger.error.external('Twilio Streak Warning', error as Error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏' };
    }
  }
  
  // üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Twilio –∞–∫–∫–∞—É–Ω—Ç–∞
  async checkAccountStatus(): Promise<{ success: boolean; message: string; balance?: string }> {
    try {
      const account = await this.client.api.accounts(config.twilioAccountSid).fetch();
      
      return {
        success: true,
        message: `–ê–∫–∫–∞—É–Ω—Ç ${account.friendlyName} –∞–∫—Ç–∏–≤–µ–Ω`,
        balance: account.status
      };
    } catch (error) {
      appLogger.error.external('Twilio Account Check', error as Error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Twilio'
      };
    }
  }
  
  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö SMS
  async getSMSStatistics(days: number = 7): Promise<{ 
    success: boolean; 
    sent?: number; 
    failed?: number; 
    cost?: string 
  }> {
    try {
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);
      
      const messages = await this.client.messages.list({
        dateSentAfter: startDate,
        limit: 1000
      });
      
      const sent = messages.filter(m => m.status === 'delivered').length;
      const failed = messages.filter(m => ['failed', 'undelivered'].includes(m.status)).length;
      
      return {
        success: true,
        sent,
        failed,
        cost: 'N/A' // Twilio –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ API
      };
    } catch (error) {
      appLogger.error.external('Twilio Statistics', error as Error);
      return { success: false };
    }
  }
}

export const smsService = new SMSService();