package com.quitsmoking.data.model

import java.time.LocalDateTime

data class Achievement(
    val id: Int,
    val title: String,
    val description: String,
    val emoji: String,
    val category: AchievementCategory,
    val requirement: AchievementRequirement,
    val isUnlocked: Boolean = false,
    val unlockedAt: LocalDateTime? = null
)

enum class AchievementCategory(val displayName: String) {
    TIME_BASED("–í—Ä–µ–º–µ–Ω–Ω—ã–µ"),
    HEALTH("–ó–¥–æ—Ä–æ–≤—å–µ"),
    FINANCIAL("–≠–∫–æ–Ω–æ–º–∏—è"),
    SOCIAL("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ")
}

sealed class AchievementRequirement {
    data class DaysWithoutHabit(val habitType: HabitType, val days: Int) : AchievementRequirement()
    data class LifeExtensionDays(val days: Int) : AchievementRequirement()
    data class HealthScore(val score: Float) : AchievementRequirement()
    data class MultipleHabitsQuit(val count: Int) : AchievementRequirement()
}

object AchievementsRepository {
    val achievements = listOf(
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        Achievement(
            id = 1,
            title = "–ü–µ—Ä–≤—ã–π —à–∞–≥",
            description = "–ë—Ä–æ—Å–∏–ª –∫—É—Ä–∏—Ç—å –Ω–∞ 1 –¥–µ–Ω—å",
            emoji = "üå±",
            category = AchievementCategory.TIME_BASED,
            requirement = AchievementRequirement.DaysWithoutHabit(HabitType.SMOKING, 1)
        ),
        Achievement(
            id = 2,
            title = "–ù–µ–¥–µ–ª—è —Å–∏–ª—ã",
            description = "–ë–µ–∑ –∫—É—Ä–µ–Ω–∏—è —Ü–µ–ª—É—é –Ω–µ–¥–µ–ª—é",
            emoji = "üí™",
            category = AchievementCategory.TIME_BASED,
            requirement = AchievementRequirement.DaysWithoutHabit(HabitType.SMOKING, 7)
        ),
        Achievement(
            id = 3,
            title = "–ú–µ—Å—è—á–Ω—ã–π –≤–æ–∏–Ω",
            description = "30 –¥–Ω–µ–π –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç",
            emoji = "üèÜ",
            category = AchievementCategory.TIME_BASED,
            requirement = AchievementRequirement.DaysWithoutHabit(HabitType.SMOKING, 30)
        ),
        Achievement(
            id = 4,
            title = "–¢—Ä–µ–∑–≤–∞—è –Ω–µ–¥–µ–ª—è",
            description = "7 –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è",
            emoji = "üö´",
            category = AchievementCategory.TIME_BASED,
            requirement = AchievementRequirement.DaysWithoutHabit(HabitType.ALCOHOL, 7)
        ),
        Achievement(
            id = 5,
            title = "–°–∞—Ö–∞—Ä–Ω—ã–π –¥–µ—Ç–æ–∫—Å",
            description = "2 –Ω–µ–¥–µ–ª–∏ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞",
            emoji = "üçØ",
            category = AchievementCategory.TIME_BASED,
            requirement = AchievementRequirement.DaysWithoutHabit(HabitType.SUGAR, 14)
        ),
        
        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
        Achievement(
            id = 6,
            title = "–ó–¥–æ—Ä–æ–≤–æ–µ —Å–µ—Ä–¥—Ü–µ",
            description = "Health Score –¥–æ—Å—Ç–∏–≥ 70%",
            emoji = "‚ù§Ô∏è",
            category = AchievementCategory.HEALTH,
            requirement = AchievementRequirement.HealthScore(0.7f)
        ),
        Achievement(
            id = 7,
            title = "–ñ–µ–ª–µ–∑–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            description = "Health Score –¥–æ—Å—Ç–∏–≥ 90%",
            emoji = "üõ°Ô∏è",
            category = AchievementCategory.HEALTH,
            requirement = AchievementRequirement.HealthScore(0.9f)
        ),
        Achievement(
            id = 8,
            title = "–ù–æ–≤–∞—è –∂–∏–∑–Ω—å",
            description = "–î–æ–±–∞–≤–ª–µ–Ω–æ 30 –¥–Ω–µ–π –∫ –∂–∏–∑–Ω–∏",
            emoji = "üåü",
            category = AchievementCategory.HEALTH,
            requirement = AchievementRequirement.LifeExtensionDays(30)
        ),
        
        // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        Achievement(
            id = 9,
            title = "–ü–µ—Ä–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è",
            description = "–°—ç–∫–æ–Ω–æ–º–∏–ª –¥–µ–Ω—å–≥–∏, –æ—Ç–∫–∞–∑–∞–≤—à–∏—Å—å –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫",
            emoji = "üí∞",
            category = AchievementCategory.FINANCIAL,
            requirement = AchievementRequirement.DaysWithoutHabit(HabitType.SMOKING, 1)
        ),
        Achievement(
            id = 10,
            title = "–¢—ã—Å—è—á–∞ —Ä—É–±–ª–µ–π",
            description = "–°—ç–∫–æ–Ω–æ–º–∏–ª –±–æ–ª–µ–µ 1000 —Ä—É–±–ª–µ–π",
            emoji = "üí∏",
            category = AchievementCategory.FINANCIAL,
            requirement = AchievementRequirement.DaysWithoutHabit(HabitType.SMOKING, 5) // ~1000 —Ä—É–±–ª–µ–π –ø—Ä–∏ —Ü–µ–Ω–µ 200‚ÇΩ/–ø–∞—á–∫–∞
        ),
        
        // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        Achievement(
            id = 11,
            title = "–ú—É–ª—å—Ç–∏–∑–∞–¥–∞—á–Ω–∏–∫",
            description = "–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±—Ä–æ—Å–∏–ª 2 –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
            emoji = "üéØ",
            category = AchievementCategory.SOCIAL,
            requirement = AchievementRequirement.MultipleHabitsQuit(2)
        ),
        Achievement(
            id = 12,
            title = "–ß–µ–º–ø–∏–æ–Ω –∑–¥–æ—Ä–æ–≤—å—è",
            description = "–û—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—Å–µ—Ö –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫",
            emoji = "üëë",
            category = AchievementCategory.SOCIAL,
            requirement = AchievementRequirement.MultipleHabitsQuit(4)
        )
    )
    
    fun getAchievementsByCategory(category: AchievementCategory): List<Achievement> {
        return achievements.filter { it.category == category }
    }
    
    fun getAllCategories(): List<AchievementCategory> {
        return AchievementCategory.values().toList()
    }
    
    fun checkAchievements(
        habits: List<Habit>,
        healthScore: Float,
        lifeExtensionDays: Int
    ): List<Achievement> {
        val unlockedAchievements = mutableListOf<Achievement>()
        
        achievements.forEach { achievement ->
            val isUnlocked = when (achievement.requirement) {
                is AchievementRequirement.DaysWithoutHabit -> {
                    val habit = habits.find { it.type == achievement.requirement.habitType }
                    habit != null && !habit.isActive && habit.quitDate != null &&
                    java.time.temporal.ChronoUnit.DAYS.between(
                        habit.quitDate.toLocalDate(),
                        LocalDateTime.now().toLocalDate()
                    ) >= achievement.requirement.days
                }
                is AchievementRequirement.HealthScore -> {
                    healthScore >= achievement.requirement.score
                }
                is AchievementRequirement.LifeExtensionDays -> {
                    lifeExtensionDays >= achievement.requirement.days
                }
                is AchievementRequirement.MultipleHabitsQuit -> {
                    habits.count { !it.isActive } >= achievement.requirement.count
                }
            }
            
            if (isUnlocked) {
                unlockedAchievements.add(achievement.copy(
                    isUnlocked = true,
                    unlockedAt = LocalDateTime.now()
                ))
            } else {
                unlockedAchievements.add(achievement)
            }
        }
        
        return unlockedAchievements
    }
}