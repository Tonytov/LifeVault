package com.lifevault.data.model

import androidx.room.Entity
import androidx.room.PrimaryKey
import java.time.LocalDate
import java.time.LocalDateTime

@Entity(tableName = "daily_challenges")
data class DailyChallenge(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,
    val title: String,
    val description: String,
    val category: ChallengeCategory,
    val difficulty: ChallengeDifficulty,
    val targetHabits: List<HabitType> = emptyList(), // –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    val rewardDays: Int,                             // –ù–∞–≥—Ä–∞–¥–∞ –≤ –¥–Ω—è—Ö –∂–∏–∑–Ω–∏
    val rewardTimeBank: Long,                        // –ù–∞–≥—Ä–∞–¥–∞ –≤ Time Bank
    val duration: ChallengeDuration,                 // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞
    val isActive: Boolean = true,
    val createdAt: LocalDateTime = LocalDateTime.now()
)

@Entity(tableName = "user_challenge_progress")
data class UserChallengeProgress(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,
    val userId: Long,
    val challengeId: Long,
    val startDate: LocalDate,
    val endDate: LocalDate,
    val status: ChallengeStatus,
    val currentStreak: Int = 0,                      // –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è
    val maxStreak: Int = 0,                          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è
    val completedDays: Int = 0,                      // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
    val totalDays: Int,                              // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    val progress: Double = 0.0,                      // –ü—Ä–æ–≥—Ä–µ—Å—Å 0-1
    val lastActivityDate: LocalDate? = null,
    val rewardsEarned: Long = 0,                     // –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    val notes: String? = null,
    val createdAt: LocalDateTime = LocalDateTime.now(),
    val updatedAt: LocalDateTime = LocalDateTime.now()
)

enum class ChallengeCategory(val displayName: String, val icon: String, val color: String) {
    QUIT_HABITS("–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–∏–≤—ã—á–µ–∫", "üö´", "#E74C3C"),
    HEALTHY_LIFESTYLE("–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", "üí™", "#2ECC71"),
    MINDFULNESS("–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "üßò", "#9B59B6"),
    PHYSICAL_ACTIVITY("–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "üèÉ", "#3498DB"),
    NUTRITION("–ü–∏—Ç–∞–Ω–∏–µ", "ü•ó", "#F39C12"),
    SLEEP_QUALITY("–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞", "üò¥", "#34495E"),
    STRESS_MANAGEMENT("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º", "üåÖ", "#1ABC9C")
}

enum class ChallengeDifficulty(val displayName: String, val multiplier: Double, val emoji: String) {
    BEGINNER("–ù–æ–≤–∏—á–æ–∫", 1.0, "üå±"),
    INTERMEDIATE("–°—Ä–µ–¥–Ω–∏–π", 1.5, "üåø"),
    ADVANCED("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 2.0, "üå≥"),
    EXPERT("–≠–∫—Å–ø–µ—Ä—Ç", 3.0, "üèÜ")
}

enum class ChallengeDuration(val days: Int, val displayName: String) {
    ONE_DAY(1, "1 –¥–µ–Ω—å"),
    THREE_DAYS(3, "3 –¥–Ω—è"),
    ONE_WEEK(7, "1 –Ω–µ–¥–µ–ª—è"),
    TWO_WEEKS(14, "2 –Ω–µ–¥–µ–ª–∏"),
    ONE_MONTH(30, "1 –º–µ—Å—è—Ü"),
    THREE_MONTHS(90, "3 –º–µ—Å—è—Ü–∞"),
    SIX_MONTHS(180, "6 –º–µ—Å—è—Ü–µ–≤"),
    ONE_YEAR(365, "1 –≥–æ–¥")
}

enum class ChallengeStatus(val displayName: String, val color: String) {
    NOT_STARTED("–ù–µ –Ω–∞—á–∞—Ç", "#95A5A6"),
    IN_PROGRESS("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "#3498DB"),
    COMPLETED("–ó–∞–≤–µ—Ä—à–µ–Ω", "#2ECC71"),
    FAILED("–ü—Ä–æ–≤–∞–ª–µ–Ω", "#E74C3C"),
    PAUSED("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "#F39C12")
}

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
object DefaultChallenges {
    
    val QUIT_SMOKING_CHALLENGES = listOf(
        DailyChallenge(
            title = "–î–µ–Ω—å –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç",
            description = "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–π –¥–µ–Ω—å –±–µ–∑ –µ–¥–∏–Ω–æ–π —Å–∏–≥–∞—Ä–µ—Ç—ã",
            category = ChallengeCategory.QUIT_HABITS,
            difficulty = ChallengeDifficulty.BEGINNER,
            targetHabits = listOf(HabitType.SMOKING),
            rewardDays = 1,
            rewardTimeBank = 24,
            duration = ChallengeDuration.ONE_DAY
        ),
        DailyChallenge(
            title = "–ù–µ–¥–µ–ª—è –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è",
            description = "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç - –ø–µ—Ä–≤—ã–π —Å–µ—Ä—å–µ–∑–Ω—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤—å—é",
            category = ChallengeCategory.QUIT_HABITS,
            difficulty = ChallengeDifficulty.INTERMEDIATE,
            targetHabits = listOf(HabitType.SMOKING),
            rewardDays = 7,
            rewardTimeBank = 168,
            duration = ChallengeDuration.ONE_WEEK
        ),
        DailyChallenge(
            title = "–ú–µ—Å—è—Ü –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è",
            description = "30 –¥–Ω–µ–π - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ö–∞ –≤ –±–æ—Ä—å–±–µ —Å –Ω–∏–∫–æ—Ç–∏–Ω–æ–≤–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é",
            category = ChallengeCategory.QUIT_HABITS,
            difficulty = ChallengeDifficulty.ADVANCED,
            targetHabits = listOf(HabitType.SMOKING),
            rewardDays = 30,
            rewardTimeBank = 720,
            duration = ChallengeDuration.ONE_MONTH
        )
    )
    
    val ALCOHOL_CHALLENGES = listOf(
        DailyChallenge(
            title = "–¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å",
            description = "–û–¥–∏–Ω –¥–µ–Ω—å –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è - –ø–æ–∫–∞–∂–∏—Ç–µ —Å–∏–ª—É –≤–æ–ª–∏",
            category = ChallengeCategory.QUIT_HABITS,
            difficulty = ChallengeDifficulty.BEGINNER,
            targetHabits = listOf(HabitType.ALCOHOL),
            rewardDays = 1,
            rewardTimeBank = 12,
            duration = ChallengeDuration.ONE_DAY
        ),
        DailyChallenge(
            title = "–°—É—Ö–∞—è –Ω–µ–¥–µ–ª—è",
            description = "7 –¥–Ω–µ–π –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞",
            category = ChallengeCategory.QUIT_HABITS,
            difficulty = ChallengeDifficulty.INTERMEDIATE,
            targetHabits = listOf(HabitType.ALCOHOL),
            rewardDays = 3,
            rewardTimeBank = 84,
            duration = ChallengeDuration.ONE_WEEK
        ),
        DailyChallenge(
            title = "–¢—Ä–µ–∑–≤—ã–π —è–Ω–≤–∞—Ä—å",
            description = "–ú–µ—Å—è—Ü –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–∏—Ä–æ–≤–æ–π —Ñ–ª–µ—à–º–æ–±",
            category = ChallengeCategory.QUIT_HABITS,
            difficulty = ChallengeDifficulty.ADVANCED,
            targetHabits = listOf(HabitType.ALCOHOL),
            rewardDays = 15,
            rewardTimeBank = 360,
            duration = ChallengeDuration.ONE_MONTH
        )
    )
    
    val SUGAR_CHALLENGES = listOf(
        DailyChallenge(
            title = "–î–µ–Ω—å –±–µ–∑ —Å–ª–∞–¥–∫–æ–≥–æ",
            description = "–ò–∑–±–µ–≥–∞–π—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ —Ü–µ–ª—ã–π –¥–µ–Ω—å",
            category = ChallengeCategory.NUTRITION,
            difficulty = ChallengeDifficulty.BEGINNER,
            targetHabits = listOf(HabitType.SUGAR),
            rewardDays = 0,
            rewardTimeBank = 6,
            duration = ChallengeDuration.ONE_DAY
        ),
        DailyChallenge(
            title = "–ù–µ–¥–µ–ª—è –±–µ–∑ —Å–∞—Ö–∞—Ä–∞",
            description = "7 –¥–Ω–µ–π –ø–∏—Ç–∞–Ω–∏—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞",
            category = ChallengeCategory.NUTRITION,
            difficulty = ChallengeDifficulty.INTERMEDIATE,
            targetHabits = listOf(HabitType.SUGAR),
            rewardDays = 2,
            rewardTimeBank = 42,
            duration = ChallengeDuration.ONE_WEEK
        ),
        DailyChallenge(
            title = "Sugar Detox - 30 –¥–Ω–µ–π",
            description = "–ü–æ–ª–Ω–∞—è –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è –æ—Ç —Å–∞—Ö–∞—Ä–∞ –Ω–∞ –º–µ—Å—è—Ü",
            category = ChallengeCategory.NUTRITION,
            difficulty = ChallengeDifficulty.EXPERT,
            targetHabits = listOf(HabitType.SUGAR),
            rewardDays = 10,
            rewardTimeBank = 180,
            duration = ChallengeDuration.ONE_MONTH
        )
    )
    
    val LIFESTYLE_CHALLENGES = listOf(
        DailyChallenge(
            title = "10,000 —à–∞–≥–æ–≤",
            description = "–ü—Ä–æ–π–¥–∏—Ç–µ 10,000 —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å",
            category = ChallengeCategory.PHYSICAL_ACTIVITY,
            difficulty = ChallengeDifficulty.BEGINNER,
            rewardDays = 0,
            rewardTimeBank = 3,
            duration = ChallengeDuration.ONE_DAY
        ),
        DailyChallenge(
            title = "8 —á–∞—Å–æ–≤ —Å–Ω–∞",
            description = "–°–ø–∏—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ 8 —á–∞—Å–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å",
            category = ChallengeCategory.SLEEP_QUALITY,
            difficulty = ChallengeDifficulty.INTERMEDIATE,
            rewardDays = 1,
            rewardTimeBank = 12,
            duration = ChallengeDuration.ONE_WEEK
        ),
        DailyChallenge(
            title = "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            description = "10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞",
            category = ChallengeCategory.MINDFULNESS,
            difficulty = ChallengeDifficulty.ADVANCED,
            rewardDays = 5,
            rewardTimeBank = 120,
            duration = ChallengeDuration.ONE_MONTH
        ),
        DailyChallenge(
            title = "2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å",
            description = "–í—ã–ø–∏–≤–∞–π—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 2 –ª–∏—Ç—Ä–æ–≤ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
            category = ChallengeCategory.NUTRITION,
            difficulty = ChallengeDifficulty.BEGINNER,
            rewardDays = 0,
            rewardTimeBank = 2,
            duration = ChallengeDuration.ONE_WEEK
        )
    )
    
    val ALL_CHALLENGES = QUIT_SMOKING_CHALLENGES + ALCOHOL_CHALLENGES + 
                         SUGAR_CHALLENGES + LIFESTYLE_CHALLENGES
}

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –Ω–∞–≥—Ä–∞–¥
object ChallengeSystem {
    
    fun calculateReward(
        challenge: DailyChallenge,
        completionRate: Double, // 0.0 - 1.0
        streakBonus: Int = 0
    ): ChallengeReward {
        val baseReward = (challenge.rewardTimeBank * completionRate).toLong()
        val difficultyMultiplier = challenge.difficulty.multiplier
        val streakMultiplier = 1.0 + (streakBonus * 0.1) // 10% –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–µ—Ä–∏–∏
        
        val totalReward = (baseReward * difficultyMultiplier * streakMultiplier).toLong()
        val lifeDays = (challenge.rewardDays * completionRate * difficultyMultiplier).toInt()
        
        return ChallengeReward(
            timeBankReward = totalReward,
            lifeDaysReward = lifeDays,
            streakBonus = streakBonus,
            completionRate = completionRate
        )
    }
    
    fun getPersonalizedChallenges(
        userHabits: List<Habit>,
        completedChallenges: List<UserChallengeProgress>,
        difficulty: ChallengeDifficulty = ChallengeDifficulty.BEGINNER
    ): List<DailyChallenge> {
        val activeHabits = userHabits.filter { it.isActive }.map { it.type }
        val completedChallengeIds = completedChallenges
            .filter { it.status == ChallengeStatus.COMPLETED }
            .map { it.challengeId }
        
        return DefaultChallenges.ALL_CHALLENGES.filter { challenge ->
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            challenge.targetHabits.isEmpty() || 
            challenge.targetHabits.any { it in activeHabits } &&
            // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            challenge.id !in completedChallengeIds &&
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            challenge.difficulty.ordinal <= difficulty.ordinal
        }.sortedBy { it.difficulty.ordinal }
    }
    
    fun getDailyChallengeOfTheDay(date: LocalDate = LocalDate.now()): DailyChallenge {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å–∏–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ "—Å–ª—É—á–∞–π–Ω–æ–≥–æ" –≤—ã–±–æ—Ä–∞
        val daysSinceEpoch = date.toEpochDay()
        val challengeIndex = (daysSinceEpoch % DefaultChallenges.ALL_CHALLENGES.size).toInt()
        return DefaultChallenges.ALL_CHALLENGES[challengeIndex]
    }
}

data class ChallengeReward(
    val timeBankReward: Long,
    val lifeDaysReward: Int,
    val streakBonus: Int,
    val completionRate: Double
)

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤
data class ChallengeStats(
    val totalChallengesStarted: Int,
    val totalChallengesCompleted: Int,
    val completionRate: Double,
    val longestStreak: Int,
    val currentStreak: Int,
    val totalRewardsEarned: Long,
    val favoriteCategory: ChallengeCategory?,
    val averageDifficulty: ChallengeDifficulty
)

// –°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
object ChallengeMotivation {
    
    private val motivationalMessages = mapOf(
        ChallengeStatus.IN_PROGRESS to listOf(
            "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ! üåü",
            "–ü–æ–º–Ω–∏—Ç–µ, –∑–∞—á–µ–º –≤—ã –Ω–∞—á–∞–ª–∏ —ç—Ç–æ—Ç –ø—É—Ç—å! üéØ",
            "–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å—Ç–æ–∏—Ç —ç—Ç–∏—Ö —É—Å–∏–ª–∏–π! ‚ù§Ô∏è"
        ),
        ChallengeStatus.COMPLETED to listOf(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –≤—ã–∑–æ–≤–æ–º! üéâ",
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –¥–Ω–∏ –∫ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏! ‚è∞",
            "–í—ã –¥–æ–∫–∞–∑–∞–ª–∏ —Å–µ–±–µ, —á—Ç–æ –º–æ–∂–µ—Ç–µ –≤—Å–µ! üèÜ",
            "–≠—Ç–æ –ø–æ–±–µ–¥–∞, –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –≥–æ—Ä–¥–∏—Ç—å—Å—è! üåü"
        ),
        ChallengeStatus.FAILED to listOf(
            "–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! –ö–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —ç—Ç–æ –æ–ø—ã—Ç! üå±",
            "–ù–µ—É–¥–∞—á–∞ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–æ —É–º–Ω–µ–µ! üí°",
            "–í–µ–ª–∏–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏! ‚è≥",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–π –≤—ã–∑–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞! üéØ"
        )
    )
    
    fun getMotivationalMessage(status: ChallengeStatus): String {
        val messages = motivationalMessages[status] ?: return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!"
        return messages.random()
    }
    
    fun getStreakMessage(streak: Int): String {
        return when {
            streak >= 30 -> "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! ${streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –í—ã –ª–µ–≥–µ–Ω–¥–∞! üëë"
            streak >= 14 -> "–î–≤–µ –Ω–µ–¥–µ–ª–∏ –ø–æ–¥—Ä—è–¥! –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è! üî•"
            streak >= 7 -> "–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥! –í—ã –≤ –æ–≥–Ω–µ! üåü"
            streak >= 3 -> "–¢—Ä–µ—Ç–∏–π –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥! –ù–∞–±–∏—Ä–∞–µ—Ç–µ –æ–±–æ—Ä–æ—Ç—ã! üí™"
            streak == 2 -> "–í—Ç–æ—Ä–æ–π –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥! –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! üå±"
            else -> "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! ‚ú®"
        }
    }
}